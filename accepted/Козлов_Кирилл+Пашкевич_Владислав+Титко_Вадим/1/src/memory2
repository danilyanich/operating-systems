#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include "memory.h"

// Number of pages is hardcoded
struct {
    char* pages[MAX_PAGES]; // List of pages pointers
    int pages_num;
    int page_size; // Size of each page
    int bytes_allocated[MAX_PAGES]; // Allocated bytes of each page
    m_id* pointers_of_page[MAX_PAGES][MAX_PAGE_SIZE];

} _g_allocator_memory;


m_id m_malloc(int size_of_chunk, m_err_code* error) {
    bool page_is_found = false;
    int *result_id;

    for (int i = 0; i<_g_allocator_memory.pages_num; i++) {
        int page_free_space = _g_allocator_memory.page_size - _g_allocator_memory.bytes_allocated[i];
        if (page_free_space >= size_of_chunk){
            page_is_found = true;
            result_id = _g_allocator_memory.pages[i] + _g_allocator_memory.bytes_allocated[i];

            _g_allocator_memory.bytes_allocated[i] += size_of_chunk;

            for (int t = 0; t<_g_allocator_memory.page_size; t++){
                if (_g_allocator_memory.pointers_of_page[i][t] != 0){
                    _g_allocator_memory.pointers_of_page[i][t] = &result_id;
                }
            }

            break;
        }
    }

    if (page_is_found == false) {
        *error = M_ERR_ALLOCATION_OUT_OF_MEMORY;
        return NULL;
    }


    *error = M_ERR_OK;
    return &result_id;
}


void m_free(m_id ptr, int size_to_free, int page, m_err_code* error) {
    int space_after = _g_allocator_memory.page_size - *(int*)(ptr - *_g_allocator_memory.pages[page]) - size_to_free;
    memmove(ptr, ptr+size_to_free, space_after);
    for (int t = 0; t<_g_allocator_memory.page_size; t++){
        _g_allocator_memory.pointers_of_page[page][t]
    }

    _g_allocator_memory.bytes_allocated[page] -= size_to_free;
    *error = M_ERR_OK;
}


void m_read(m_id read_from_id,void* read_to_buffer, int size_to_read, m_err_code* error) {
  memcpy(read_to_buffer, read_from_id, size_to_read);
  *error = M_ERR_OK;
}


void m_write(m_id write_to_id, void* write_from_buffer, int size_to_write, m_err_code* error) {
  memcpy(write_to_id, write_from_buffer, size_to_write);
  *error = M_ERR_OK;
}


void m_init(int number_of_pages, int size_of_page) {
    //if (_g_allocator_memory != NULL) free(_g_allocator_memory); Delete memory var

    // Init sandbox memory
    _g_allocator_memory.page_size = size_of_page;
    _g_allocator_memory.pages_num = number_of_pages;
    for (int i = 0; i<number_of_pages; i++)
    {
        _g_allocator_memory.pages[i] = malloc(size_of_page);
        _g_allocator_memory.bytes_allocated[i] = 0;

        for (int t = 0; t<size_of_page; t++){
            _g_allocator_memory.pointers_of_page[i][t] = 0;
        }
    }
}
